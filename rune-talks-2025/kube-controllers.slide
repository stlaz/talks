# Writing a real Kubernetes controller

Stanislav Láznička
Software Engineer at Microsoft

https://github.com/stlaz
stlaz on k8s Slack

## Things a common mortal might know about controllers

<br /><br /><br />
What do you know?<br />
Have you ever written a Kubernetes controller?

## Things a common mortal might know about controllers

- run in background
- maintain state based on (sometimes dynamic) config
- live in the kube-controller-manager (some in kube-apiserver)
- are builing blocks to operators

## Controller - higher-level view

- event handler
- runs in an "infinite" loop
- two classes:
    - edge triggered - reacts to state transition 
    - level triggered - reacts to state being different

.image clock-signal.png
.caption source: teachics.org

## Kubernetes controller frameworks

- [k8s.io/client-go](https://github.com/kubernetes/client-go/)
    - Kubernetes in-tree
    - clients autogenerated from Go API structs
    - client, informer, lister; mock clients ("fake")
- [controller-runtime](https://github.com/kubernetes-sigs/controller-runtime)
    - [kubebuilder](https://book.kubebuilder.io/)
    - [Operator SDK](https://sdk.operatorframework.io/)
- [openshift/library-go](https://github.com/openshift/library-go)
    - controller [Factory](https://github.com/openshift/library-go/blob/80620876b7c2dbd5def6da140ad044e6f3de98b5/pkg/controller/factory/factory.go#L27)
    - written by actual kubernetes/api-machinery authors
    - heavily undocumented

: ask controller-runtime users about live / cached API calls

## Kube controller building blocks

- work queue
- [k8s.io/client-go](https://github.com/kubernetes/client-go/) informers / listers (caching)
- typed / dynamic [k8s.io/client-go](https://github.com/kubernetes/client-go/) clients
- sync loop (look for **`sync*()`** methods)
- public **`Run()`** method and a **`New<ControllerNameHere>()`** constructor
- metrics - careful with labels!

## k8s.io/client-go informers

- "clever" cache for Kube objects
- leverage **`Watch()`** streams
- can be accessed with **`Get()`** and **`List()`** methods via a [lister](https://github.com/kubernetes/client-go/blob/master/listers/generic_helpers.go)
    - CAREFUL! These return pointer to local cache
- support custom indexing
- allow attaching callbacks to cache events (Add, Update, Delete)
- MUST be explicitly started

## Kube controller in colors

.image client-go-controller-interaction.jpeg 500 _
.caption source: github.com/kubernetes/sample-controller/blob/master/docs

## Something real now

<br /><br />

- [ClusterTrustBundlePublisher](https://github.dev/kubernetes/kubernetes/blob/728dc0d8c7a4d68157b2106330b65abcd5faac87/pkg/controller/certificates/clustertrustbundlepublisher/publisher.go#L68-L69)

## To write a controller

- choose/create a resource ot react to
- generate clients and CRDs if necessary
- write your own RBAC
- clients are for writing, listers for reading
- informers feed the workqueue
- keys from workqueue are handled in `sync*()`

## Homework

<br />

[github.com/stlaz/sample-kube-controller](https://github.com/stlaz/sample-kube-controller/tree/enhance), branch _**enhance**_
- fork of https://github.com/kubernetes/sample-controller
- adds a Makefile with a couple helpful targets
- project structure I prefer
- +automatic generating of CRDs
- +Dockerfile
- +sample deployment into a `kind` cluster
- +vendor for offline builds

## Microsoft has offices in Brno

Vlněna 5, Clubco

.image ./pozice.png _ 400

## Slajdy

.image ./slides.png _ 400

## Bonus: Server-side apply

- Multiple controllers, one resource
- Field management
- Merge strategy defined with the API
    - lists:
        - atomic, set, map (for structured lists)
    - maps:
        - atomic, granular
    - structs:
        - atomic, granular
- [benefits of SSA over other methods](https://kubernetes.io/blog/2022/10/20/advanced-server-side-apply/)
- [Server-Side Apply docs](https://kubernetes.io/docs/reference/using-api/server-side-apply/)
