# Bringing Pod Security Admission to Your Kubernetes Distribution

Stanislav Láznička
Software Engineer at Red Hat
stlaz on k8s Slack

## Pod Security Admission

- successor to Pod Security Policies
- cluster wide configuration with namespaces overrides
- offers three security levels: [TODO: add link to PSS page]
  - restricted - most restricted
  - baseline - "empty security context" level
  - privileged - do whatever
- the levels might require further admission checks - e.g. CSI inline volumes

## Pod Security Admission (2)

- operates in three modes:
  - enforcing (`pod-security.kubernetes.io/enforce`)
  - client logging (`pod-security.kubernetes.io/warn`)
  - server logging (`pod-security.kubernetes.io/audit`)
- each mode can also be versioned (`pod-security.kubernetes.io/<MODE>-version: <VERSION>`)

## Step one - start logging

- "let's see how bad this is" phase
- global logging config:

.code ./code/psa-config-logging.yaml /CONFIG OMIT/,/END OMIT/

- identify offending pods from default installation

## Optional - Got your own pod security?

- pod security admission already exists
  - allow duality?
    - gotta sync namespace labels ☹
- controller mapping existing pod admission to namespaces
- use [server-side apply](https://kubernetes.io/docs/reference/using-api/server-side-apply/)
    - allows per-label ownership

## Introduce other teams to your plan

- it's a group effort, communicate!
  - "things will break!"
  - emails, Slack announce channels, blogs, department-wide presentations
  - an angry PM *will* appear sooner or later
- identifying violations in audit logs:
```
gzcat *-audit-*log.gz | \ [FIXME: does not display correctly]
  jq '. | select(.annotations | has("pod-security.kubernetes.io/audit-violations")) | {namespace: .objectRef.namespace, podSecurityReason: .annotations["pod-security.kubernetes.io/audit-violations"] }' | \ 
  jq -C -s --sort-keys '. | unique'
```
- TODO: mention psachecker?

## Set up alerts

- no violations in the default installation
    - TODO: sample PR adding securityContext to pods?
- `monitoring.coreos.com/PrometheusRule` query for our pod security alerts:

.code ./code/podsecurity-violations-alert.yaml /START OMIT/,/END OMIT/

- TODO: explain that we had to introduce our namespaces to the metric, post a link to [metrics cardinatily explosion](https://github.com/kubernetes/kubernetes/pull/102523) upstream issue
- TODO: talk about the importance of telemetry and telemetry privacy issues, and about alert vs metrics (the former being visible to users)

## Testing

- introduce PSa labels to your tests
- tests are usually static -> tedious but not hard
- TODO: mention a mix of upstream and downstream tests
- [Adding PSa labels to upstream e2e tests](https://github.com/kubernetes/kubernetes/pull/109283)
- [Extending the labels set to all instead of just enforcement](https://github.com/kubernetes/kubernetes/pull/118280)
- TODO: mention upstream test function for restricted security context

## Wait

- you've done everything
- your first PSa-enabled version will get shipped to customers in two months

## Get results, iterate

- people do weird things
- some of the weird things aren't that weird 
- work your findings into your platform, go back to _Wait_

## Enforce

- Enforce `<your dream security profile here>` globally!
- Well done!
  - product management is excited
  - your colleagues carry you on hands
  - the sales are skyrocketing

