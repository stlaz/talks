# Bringing Pod Security Admission to Your Kubernetes Distribution

Stanislav Láznička
Software Engineer at Red Hat

https://github.com/stlaz
stlaz on k8s Slack

## Pod Security Admission

- successor to Pod Security Policies
- cluster wide configuration with namespaces overrides
- offers three [security profiles](https://kubernetes.io/docs/concepts/security/pod-security-standards/):
  - **restricted** - most restricted
  - **baseline** - "empty security context" level
  - **privileged** - do whatever
- the levels might require further admission checks - e.g. CSI inline volumes

## Pod Security Admission (2)

- operates in three modes:
  - **enforcing** (`pod-security.kubernetes.io/enforce`)
  - **client logging** (`pod-security.kubernetes.io/warn`)
  - **server logging** (`pod-security.kubernetes.io/audit`)
- each mode can also be versioned (`pod-security.kubernetes.io/<MODE>-version: <VERSION>`)

## Step one - start logging

- "let's see how bad this is" phase
- global logging config:

.code ./code/psa-config-logging.yaml /CONFIG OMIT/,/END OMIT/

- identify offending pods from default installation

## Optional - Got your own pod security?

- pod security admission already exists
  - allow duality?
    - gotta sync namespace labels ☹
- controller mapping existing pod admission to namespaces
- use [server-side apply](https://kubernetes.io/docs/reference/using-api/server-side-apply/)
    - allows per-label ownership

## Introduce other teams to your plan

- it's a group effort, communicate!
  - "things will break!"
  - emails, Slack announce channels, blogs, department-wide presentations
  - an angry PM *will* appear sooner or later
- identifying violations in audit logs:
```
zcat *-audit-*log.gz | \
  jq '. | select(.annotations | has("pod-security.kubernetes.io/audit-violations")) |
  {
     namespace: .objectRef.namespace,
     podSecurityReason: .annotations["pod-security.kubernetes.io/audit-violations"]
  }' | \
  jq -C -s --sort-keys '. | unique'
```
- TODO: mention psachecker?

## Set up alerts

- no violations in the default installation
- `monitoring.coreos.com/PrometheusRule` query for our **informative** pod security alerts:

.code ./code/podsecurity-violations-alert.yaml /START OMIT/,/END OMIT/

- `ocp_namespace` comes from a downstream patch
    - careful around [label cardinality](https://github.com/kubernetes/kubernetes/pull/102523)!
-  `nil -> val` issue
- telemetry is necessary

: mention alert vs metrics (the former being visible to users), telemetry data privacy

## Testing

- introduce PSa labels to your e2e tests
- assuming e2e tests are a mix of upstream/downstream
- [Adding PSa labels to upstream e2e tests](https://github.com/kubernetes/kubernetes/pull/106454)
    - +[helpers](https://github.com/kubernetes/kubernetes/blob/6c578bc982f37d9431d7fc586a9123a0dd19c468/test/e2e/framework/pod/utils.go#L156-L177) to retrieve restricted security context
- [Default restricted enforcement in upstream e2e tests](https://github.com/kubernetes/kubernetes/pull/109283)
- [Set all labels instead of just enforcement in e2e tests](https://github.com/kubernetes/kubernetes/pull/118280)
: tests are usually static -> labelling them is tedious but not hard
: assuming e2e tests are run in multiple repos

## What now?

- gradual changes, waiting periods
- communication with customers
- out there be monsters
    - "Nobody should do that! Oh, the humanity!"

## Enforce

- Enforce `<your dream security profile here>` globally!
- Well done!
  - product management is excited
  - your colleagues carry you on hands
  - the sales are skyrocketing

## Special thanks

- My team
    - [Sergiusz Urbaniak](https://github.com/s-urbaniak)
    - [Krzysztof Ostrowski](https://github.com/ibihim)
    - [Ilias Rinis](https://github.com/liouk)

- [David Eads](https://github.com/deads2k)
- [Camila Macedo](https://github.com/camilamacedo86)
- [Ben Parees](https://github.com/bparees)
