# Kubernetes Multitenancy in Image Pulling

Standa L√°zniƒçka
Principal Software Engineer at Microsoft
stanislav.laznicka@microsoft.com
https://github.com/stlaz
https://www.linkedin.com/in/slaznicka/
stlaz on k8s Slack

## The story

1. A private container image `container-repo.org/niceorg/coolstuff-private:v1`
2. The repository `container-repo.org/niceorg` requires additional authentication
3. Run in a pod in a Kubernetes cluster in namespace `niceorg-ns`
    - `imagePullSecrets` points to `Secret 1`
4. Only **Nice.org** employees can access `niceorg-ns`
5. Somehow people from **NotSoNice.org** got their hands on secret information from the container image!

## What happened

.image ./ensure_secret_image_pulls.svg 400 1000

## Hey, that's not right!

.image ./angry-mob.jpeg 500 _
.caption generated by Copilot

## Structure of an image pull

1. credentials passed via a Secret from Pod
1. **kubelet** issues an image pull request to CRI
    - uses the creds from the secret(s)
1. **container runtime** reaches the remote registry
    - attempts pull with the credentials
1. the registry authenticates the user, returns image
1. **container runtime** stores the image for local use
    - identity of the pulling user is not a part of the stored data
1. **kubelet** runs a container with the image

## Oh no, async components ü§¶

: have people think about what the solution should look like in the next slides
- kubelet
     - no user info from CRI üôÅ
	 - needs a custom cache for user `<-->` image mapping
- kubelet restarts
     - can't lose the usermapping cache ==> needs persistence

## More async trouble 

- kubelet waits for CRI to finish pulling
     - kubelet could crash!
- write a record
    - before pull?
        - authn fails after crash - unauthorized pulls!
    - after pull?
        - crash before a complete pull -> unattributed image!

## Feature flexibility for more fun

: should mention some of the below complicate the scenarios with unattributed images
1. _"pre-pulled images should never require authentication"_
    - pre-pull to make images immediately available to all
	- access to the image registry is impractical
1. _"a set of images should be removed from pull authentication"_
    - platforms that run their own control plane in pods
	- more explicit than 1.
1. _"always verify, regardless if pre-pulled or not"_
1. _"the current behavior is fine"_
    - YOLO
	- policy switch -> keep pull records

## The solution

- kubelet configuration
```yaml
imagePullCredentialsVerificationPolicy: <4 different policies>
preloadedImagesVerificationAllowlist: <list of full-path wildcard segments (ends with /*)>
```
- different records **before** and **after** an image pull
- on-disk (1.34 should add in-memory) caching layer:
```
/var/lib/kubelet/image_manager/pulling
/var/lib/kubelet/image_manager/pulled
```
- filenames = SHA256 hash of image name/CRI ref (resp.)

## Persisted records 

- Image Pull Intent record:
    - store the image name from Pod spec
    - removed on image pull complete
- Imaged Pulled record:
    - how was an image pulled
      - node accessible creds
      - using a Secret
      - upcoming - using an SA token

## Image Pull Intent

```go
// ImagePullIntent is a record of the kubelet attempting to pull an image.
type ImagePullIntent struct {
    metav1.TypeMeta
    Image string `json:"image"`
}
```

## Image Pulled Record

```go
type ImagePulledRecord struct {
    metav1.TypeMeta
    LastUpdatedTime metav1.Time `json:"lastUpdatedTime"` // for use during image GC
    ImageRef string `json:"imageRef"`
    // Example:
    //   Container requests the `hello-world:latest@sha256:91fb4b041da273d5a3273b6d587d62d518300a6ad268b28628f74997b93171b2` image:
    //     "credentialMapping": {
    //       "hello-world": { "nodePodsAccessible": true }
    //     }
    CredentialMapping map[string]ImagePullCredentials `json:"credentialMapping,omitempty"`
}
type ImagePullCredentials struct {
    KubernetesSecrets []ImagePullSecret `json:"kubernetesSecretCoordinates"`
    NodePodsAccessible bool `json:"nodePodsAccessible,omitempty"`  
}
type ImagePullSecret struct {
    UID string       `json:"uid"`
    Namespace string `json:"namespace"`
    Name string      `json:"name"`

    CredentialHash string `json:"credentialHash"`
}
```

## Read more about it!

- Original issue (Dec 2015): [https://github.com/kubernetes/kubernetes/issues/18787](https://github.com/kubernetes/kubernetes/issues/18787)
- KEP: [https://kep.k8s.io/2535](https://kep.k8s.io/2535)
- Implementation: [https://github.com/kubernetes/kubernetes/pull/128152](https://github.com/kubernetes/kubernetes/pull/128152)
- Kubernetes blog post: [https://kubernetes.io/blog/2025/05/12/kubernetes-v1-33-ensure-secret-pulled-images-alpha/](https://kubernetes.io/blog/2025/05/12/kubernetes-v1-33-ensure-secret-pulled-images-alpha/)

## Microsoft m√° office v Brnƒõ

Vlnƒõna 5, Clubco

.image ./pozice.png _ 400

